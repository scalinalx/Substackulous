export const runtime = 'edge';
export const dynamic = 'force-dynamic';
export const revalidate = 0;

import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import Groq from 'groq-sdk';

const GROQ_API_KEY = process.env.GROQ_API_KEY;
if (!GROQ_API_KEY) {
  throw new Error('Groq API key not configured');
}

const groq = new Groq({
  apiKey: GROQ_API_KEY
});

// Initialize Supabase client with service role key for admin operations
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

export async function POST(req: Request) {
  try {
    console.log('Starting single note generation request...');
    const { subject, userId } = await req.json();

    if (!subject) {
      console.log('Subject missing in request');
      return NextResponse.json({ error: 'Subject is required' }, { status: 400 });
    }

    if (!userId) {
      console.log('User ID missing in request');
      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });
    }

    console.log('Checking user credits...');
    // First, check if user has enough credits
    let { data: profile, error: profileError } = await supabaseAdmin
      .from('profiles')
      .select('credits')
      .eq('id', userId)
      .single();

    if (profileError) {
      console.error('Profile query error:', profileError);
      return NextResponse.json({ 
        error: 'Failed to fetch user profile',
        details: profileError.message 
      }, { status: 404 });
    }

    if (!profile) {
      console.log('User profile not found:', userId);
      return NextResponse.json({ error: 'User profile not found' }, { status: 404 });
    }

    const creditCost = 1; // Lower cost for single note
    if (profile.credits < creditCost) {
      console.log('Insufficient credits for user:', userId);
      return NextResponse.json({ error: 'Insufficient credits' }, { status: 400 });
    }

    console.log('Making request to Groq API...');
    const prompt = `Generate a viral note for my Substack on ${subject}. Start with a strong hook. Vary sentence structure and length. Often use short & sweet sentences that pack a punch. Maximize readability through formatting.
Output only the note with no additional explanation.`;

    const completion = await groq.chat.completions.create({
      messages: [{
        role: "user",
        content: prompt
      }],
      model: "llama-3.3-70b-specdec",
      temperature: 0.69,
      max_tokens: 1000,
      top_p: 0.95,
      stream: false,
      stop: null
    });

    const content = completion.choices?.[0]?.message?.content;
    if (!content) throw new Error('No content generated by Groq API');

    const { error: updateError } = await supabaseAdmin
      .from('profiles')
      .update({ credits: profile.credits - creditCost })
      .eq('id', userId);

    if (updateError) {
      return NextResponse.json({ 
        error: 'Failed to update credits',
        details: updateError.message 
      }, { status: 500 });
    }

    return NextResponse.json({ note: content.trim() });
  } catch (error) {
    console.error('Error in note generation:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to generate note',
        details: error instanceof Error ? error.stack : 'No stack trace available'
      },
      { status: 500 }
    );
  }
} 